package lojasentrega;

/**
 * Importação das classes necessárias para o funcionamento do programa
 *
 * @author Gabriel Ribeiro
 */
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.*;

/**
 * Importa a classe LojasEntrega, onde é feito o código da conexão (o Conector).
 */
import lojasentrega.LojasEntrega;

public class Estabelecimentos extends javax.swing.JFrame {

    /**
     * PreparedStatement e ResultSet são frameforks do pacote Java.sql e servem
     * para preparar e executar as instruções SQL.
     */
    Connection conexao = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    public Estabelecimentos() {
        /**
         * Inicializa os componentes, realiza a conexão e cria um grupo de
         * botões.
         */
        initComponents();
        conexao = LojasEntrega.conector();
        buttonGroup1.add(rbtodos);
        buttonGroup1.add(rbfarmacias);
        buttonGroup1.add(rbmercados);
        buttonGroup1.add(rbpetshops);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        rbfarmacias = new javax.swing.JRadioButton();
        rbmercados = new javax.swing.JRadioButton();
        rbpetshops = new javax.swing.JRadioButton();
        rbtodos = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lista de Estabelecimentos");
        setBackground(new java.awt.Color(102, 0, 102));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Telefone", "Bairro", "Rua", "Categoria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setToolTipText("");
        jScrollPane1.setViewportView(tabela);
        if (tabela.getColumnModel().getColumnCount() > 0) {
            tabela.getColumnModel().getColumn(0).setResizable(false);
            tabela.getColumnModel().getColumn(1).setResizable(false);
            tabela.getColumnModel().getColumn(2).setResizable(false);
            tabela.getColumnModel().getColumn(3).setResizable(false);
            tabela.getColumnModel().getColumn(4).setResizable(false);
            tabela.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel7.setText("Selecione os tipos de estabelecimento que deseja");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        rbfarmacias.setText("Farmácias");

        rbmercados.setText("Mercados");

        rbpetshops.setText("Pet Shops");

        rbtodos.setText("Todos");

        jButton1.setText("Procurar Estabelecimentos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbtodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbfarmacias)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbpetshops)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbmercados)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(rbtodos)
                    .addComponent(rbfarmacias)
                    .addComponent(rbpetshops)
                    .addComponent(rbmercados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        /* Os códigos no if e else são a mesma coisa, então explicando o
        * primeiro if já explica o resto.
         */
        if (rbtodos.isSelected()) {
            /**
             * Quando o botão "Todos" for clicado.
             */
            try {
                conexao = LojasEntrega.conector();

                /**
                 * Seleciona todos os dados da tabela estabelecimentos e os
                 * exibe, nos outros if tem o acrescimo do Where Categoria=
                 * porque estamos querendo exibir apenas uma categoria
                 * específica.
                 */
                String sql = "Select * from estabelecimentos";
                PreparedStatement stmt = conexao.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery();

                /**
                 * Cria uma tabela, com 0 linhas, por que só será adicionado
                 * mais linhas quando for mostrado os dados, por exemplo se tem
                 * 4 estabelecimentos, a tabela ira criar 4 linhas e as
                 * preenchera com os dados.
                 */
                DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {
                    /**
                     * Como descrito acima, as linhas seram criadas de acordo
                     * com o numero de estabelecimentos cadastrados, essa linha
                     * faz justamente isso, cria uma linha e exibe os dados do
                     * estabelecimento cadastrado.
                     */
                    modelo.addRow(new Object[]{rs.getString("ID"), rs.getString("Nome"), rs.getString("Telefone"), rs.getString("Bairro"), rs.getString("Rua"), rs.getString("Categoria")});
                }
                rs.close();
                conexao.close();
            } catch (SQLException e) {

            }

            /**
             * A partir daqui é o mesmo código, só mudando o botão clicado e
             * acrescentando o WHERE=categoria.
             */
        } else if (rbfarmacias.isSelected()) {
            try {
                conexao = LojasEntrega.conector();

                String sql = "Select * from estabelecimentos where Categoria='Farmacia'";
                PreparedStatement stmt = conexao.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery();
                DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {
                    modelo.addRow(new Object[]{rs.getString("ID"), rs.getString("Nome"), rs.getString("Telefone"), rs.getString("Bairro"), rs.getString("Rua"), rs.getString("Categoria")});
                }
                rs.close();
                conexao.close();
            } catch (SQLException e) {

            }

        } else if (rbpetshops.isSelected()) {
            try {
                conexao = LojasEntrega.conector();

                String sql = "Select * from estabelecimentos where Categoria='Petshop'";
                PreparedStatement stmt = conexao.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery();
                DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {
                    modelo.addRow(new Object[]{rs.getString("ID"), rs.getString("Nome"), rs.getString("Telefone"), rs.getString("Bairro"), rs.getString("Rua"), rs.getString("Categoria")});
                }
                rs.close();
                conexao.close();
            } catch (SQLException e) {

            }

        } else if (rbmercados.isSelected()) {
            try {
                conexao = LojasEntrega.conector();

                String sql = "Select * from estabelecimentos where Categoria='Mercado'";
                PreparedStatement stmt = conexao.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery();
                DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
                modelo.setNumRows(0);

                while (rs.next()) {
                    modelo.addRow(new Object[]{rs.getString("ID"), rs.getString("Nome"), rs.getString("Telefone"), rs.getString("Bairro"), rs.getString("Rua"), rs.getString("Categoria")});
                }
                rs.close();
                conexao.close();
            } catch (SQLException e) {
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um tipo");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estabelecimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estabelecimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estabelecimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estabelecimentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Estabelecimentos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbfarmacias;
    private javax.swing.JRadioButton rbmercados;
    private javax.swing.JRadioButton rbpetshops;
    private javax.swing.JRadioButton rbtodos;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
